@mixin border-radius ($radius) {
	-moz-border-radius: $radius;
	-webkit-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}

@mixin box-shadow($top: 5px, $left: 5px, $blur: 5px, $color: #000, $inset: "") {
 	@if $inset != "" {
	 	-webkit-box-shadow: $top $left $blur $color $inset;
		-moz-box-shadow: $top $left $blur $color $inset;
		box-shadow: $top $left $blur $color $inset;
 	} @else {
	 	-webkit-box-shadow: $top $left $blur $color;
		-moz-box-shadow: $top $left $blur $color;
		box-shadow: $top $left $blur $color;
 	}
}

@mixin box-sizing($type) {
	box-sizing: #{$type};
	-webkit-box-sizing: #{$type};
	-moz-box-sizing: #{$type};
}

@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -o-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

@mixin clearfix {
	zoom: 1;
	&:before,
	&:after {
		content: '';
		display: table;
	}
	&:after {
		clear: both;
	}
}

@mixin clearfixafter {
	zoom: 1;
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

@function dim($target, $source, $unit: em) {
	@if unitless($target) { $target: 1px * $target; }
	@if unitless($source) { $source: 1px * $source; }

	@if $unit == em {
		@return ($target / $source) * 1em;
	}
	@else if $unit == percent {
		@return percentage($target / $source);
	}
	@else {
		@return ($target / $source)#{$unit};
	}
}

@mixin dotted-link($color) {
	border-bottom: 1px dotted $color;
	color: $color;
	// display: inline-block;

	&:hover {
		border-bottom-style: solid;
	}
}

@mixin ie6 {
	* html & { @content }
}

// !opacity should be passed in the x.x format
@mixin opacity($opacity) {
  filter: alpha(opacity=($opacity * 100));
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
  -moz-opacity: $opacity;
  -khtml-opacity: $opacity;
  opacity: $opacity;
}

// shortcut to dim()
@function pxpc($target, $source) {
	@return dim($target, $source, percent);
}

// shortcut to dim()
@function pxem($target, $source: $default-font-size) {
	@return dim($target, $source, em);
}

@mixin respond-to($media) {
	@media #{$media} { @content; }
}

// @mixin respond-to($media) {
// 	@if $media == mobile {
// 		@media only screen and (min-width: $bp-mobile)  { @content; }
// 	}
// 	@else if $media == tablet {
// 		@media only screen and (min-width: $bp-tablet)  { @content; }
// 	}
// 	@else if $media == desktop {
// 		@media only screen and (min-width: $bp-desktop) { @content; }
// 	}
// }

@mixin smooth-transition($duration: .2s) {
	-o-transition: all $duration linear;
	-moz-transition: all $duration linear;
	-webkit-transition: all $duration linear;
	transition: all $duration linear;
}

@mixin visually-hidden {
	border: 0;
	//clip: rect(0 0 0 0); // won't reset with clip: auto; in ie7
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

@mixin visually-hidden-clear {
	clip: auto;
	height: auto;
	margin: 0;
	overflow: visible;
	position: static;
	width: auto;
}
